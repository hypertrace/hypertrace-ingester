apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.rawSpansGrouperConfig.name }}
  labels:
    release: {{ .Release.Name }}
data:
  application.conf: |-
    kafka.streams.config = {
      # Core configs
      application.id = raw-spans-to-structured-traces-grouping-job
      bootstrap.servers = "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.bootstrapServers }}"
      schema.registry.url = "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.schemaRegistryUrl }}"
      value.subject.name.strategy = "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy"
      # Core configs - For applications with state
      num.stream.threads = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.numStreamThreads }}"
      commit.interval.ms = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.commitIntervalMs }}"
      group.instance.id = ${?POD_NAME}
      cache.max.bytes.buffering = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.cacheMaxBytesBuffering }}"
      # Common client (prodcuer, consumer, admin) configs
      receive.buffer.bytes = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.receiveBufferBytes }}"
      send.buffer.bytes = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.sendBufferBytes }}"
      # Producer configs
      producer.acks = "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.producerAcks }}"
      producer.batch.size = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.producerBatchSize }}"
      producer.linger.ms = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.producerLingerMs }}"
      producer.compression.type = "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.producerCompressionType }}"
      producer.max.request.size = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.producerMaxRequestSize }}"
      producer.buffer.memory = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.producerBufferMemory }}"
      # Consumer configs
      consumer.max.partition.fetch.bytes = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.consumerMaxPartitionFetchBytes }}"
      consumer.max.poll.records = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.consumerMaxPollRecords }}"
      consumer.session.timeout.ms = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.consumerSessionTimeoutMs }}"
      # Changelog topic configs
      replication.factor = "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.replicationFactor }}"
      topic.cleanup.policy = "delete,compact"
      # RocksDB state store configs
      state.dir = "/var/data/"
      rocksdb.cache.total.capacity: "{{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.rocksdbCacheTotalCapacity }}"
      rocksdb.cache.write.buffers.ratio: "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.rocksdbCacheWriteBuffersRatio }}"
      rocksdb.cache.high.priority.pool.ratio: "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.rocksdbCacheHighPriorityPoolRatio }}"
      rocksdb.write.buffer.size = {{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.rocksdbWriteBufferSize }}
      rocksdb.max.write.buffers = {{ int .Values.rawSpansGrouperConfig.kafkaStreamsConfig.rocksdbMaxWriteBuffers }}
      rocksdb.cache.index.and.filter.blocks = {{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.rocksdbCacheIndexAndFilterBlocks }}
      # Exception handler configs
      default.production.exception.handler = {{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.defaultProductionExceptionHandler }}
      ignore.production.exception.classes = {{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.ignoreProductionExceptionClasses }}
      # Others
      metrics.recording.level = "{{ .Values.rawSpansGrouperConfig.kafkaStreamsConfig.metricsRecordingLevel }}"
      {{- if .Values.rawSpansGrouperConfig.extraKafkaStreamsConfig }}
      {{- range $key,$value := .Values.rawSpansGrouperConfig.extraKafkaStreamsConfig }}
      {{ $key }} = {{ $value }}
      {{- end }}
      {{- end }}
    }

    group.partitioner = {
      enabled = {{ .Values.rawSpansGrouperConfig.groupPartitionerEnabled }}
      service.host = {{ .Values.rawSpansGrouperConfig.groupPartitionerConfigServiceHost }}
      service.port = {{ .Values.rawSpansGrouperConfig.groupPartitionerConfigServicePort }}
    }

    span.groupby.session.window.interval = {{ .Values.rawSpansGrouperConfig.span.groupby.internal }}

    {{- if hasKey .Values.rawSpansGrouperConfig "defaultMaxSpanCount" }}
    default.max.span.count = {{ .Values.rawSpansGrouperConfig.defaultMaxSpanCount }}
    {{- end }}

    {{- if hasKey .Values.rawSpansGrouperConfig "maxSpanCount" }}
    max.span.count = {
    {{- range $k, $v := .Values.rawSpansGrouperConfig.maxSpanCount }}
      {{ $k }} = {{ int $v }}
    {{- end }}
    }
    {{- end }}

    {{- if hasKey .Values.rawSpansGrouperConfig "metrics" }}
    metrics {
      reporter {
        names = {{- toJson .Values.rawSpansGrouperConfig.metrics.reporter.names | trim | nindent 12 }}
      }
    }
    {{- end }}

    # span normalizer config
    {{- if hasKey .Values.spanNormalizerConfig "processor" }}
    processor {
      {{- if hasKey .Values.spanNormalizerConfig.processor "tenantIdTagKey" }}
      tenantIdTagKey = "{{ .Values.spanNormalizerConfig.processor.tenantIdTagKey }}"
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "excludeTenantIds" }}
      excludeTenantIds = {{ .Values.spanNormalizerConfig.processor.excludeTenantIds | toJson }}
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "defaultTenantId" }}
      defaultTenantId = "{{ .Values.spanNormalizerConfig.processor.defaultTenantId }}"
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "spanDropCriterion" }}
      spanDropCriterion = {{ .Values.spanNormalizerConfig.processor.spanDropCriterion | toJson }}
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "spanDropFilters" }}
      spanDropFilters = {{ .Values.spanNormalizerConfig.processor.spanDropFilters | toJson }}
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "bypassKey" }}
      bypass.key = "{{ .Values.spanNormalizerConfig.processor.bypassKey }}"
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "lateArrivalThresholdDuration" }}
      late.arrival.threshold.duration = "{{ .Values.spanNormalizerConfig.processor.lateArrivalThresholdDuration }}"
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "allowedAttributesPrefixes" }}
      allowed.attributes.prefixes = {{ .Values.spanNormalizerConfig.processor.allowedAttributesPrefixes | toJson }}
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "prefixedMatchedAllowedAttributes" }}
      prefixed.matched.allowed.attributes = {{ .Values.spanNormalizerConfig.processor.prefixedMatchedAllowedAttributes | toJson }}
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "rootExitSpanDropCriterion" }}
      rootExitSpanDropCriterion = {{ .Values.spanNormalizerConfig.processor.rootExitSpanDropCriterion | toJson }}
      {{- end }}

      {{- if hasKey .Values.spanNormalizerConfig.processor "excludeLogsTenantIds" }}
      excludeLogsTenantIds = {{ .Values.spanNormalizerConfig.processor.excludeLogsTenantIds | toJson }}
      {{- end }}
    }
    {{- end }}

    {{- if hasKey .Values.spanNormalizerConfig "metrics" }}
    metrics {
      reporter {
        names = {{- toJson .Values.spanNormalizerConfig.metrics.reporter.names | trim | nindent 12 }}
      }
    }
    {{- end }}
    clients {
      config.service.config = {
        host = {{ .Values.spanNormalizerConfig.configServiceHost }}
        port = {{ .Values.spanNormalizerConfig.configServicePort }}
      }
    }
    span.rules.exclude {
      cache = {
        refreshAfterWriteDuration = {{ .Values.spanNormalizerConfig.excludeSpanRulesConfig.cache.refreshAfterWriteDuration }}
        expireAfterWriteDuration = {{ .Values.spanNormalizerConfig.excludeSpanRulesConfig.cache.expireAfterWriteDuration }}
      }
    }
    {{- if hasKey .Values.spanNormalizerConfig "rateLimitConfig" }}
    rate.limit.config = [
      {{- range $k,$v := $.Values.spanNormalizerConfig.rateLimitConfig }}
      {
        tenantId = {{ $v.tenantId }}
        groupingKey = {{ $v.groupingKey }}
        maxSpansPerMinute = {{ $v.maxSpansPerMinute }}
      },
      {{- end }}
    ]
    {{- end }}
