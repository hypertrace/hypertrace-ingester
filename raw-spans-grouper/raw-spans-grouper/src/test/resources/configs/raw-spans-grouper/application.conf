service.name = raw-spans-grouper
service.admin.port = 8051

main.class = org.hypertrace.core.rawspansgrouper.RawSpansGrouper

span.type = rawSpan
input.topic = "raw-spans-from-jaeger-spans"
output.topic = "structured-traces-from-raw-spans"
precreate.topics = false

kafka.streams.config = {
  application.id = raw-spans-to-structured-traces-grouping-job
  num.stream.threads = 2
  topic.cleanup.policy = "delete,compact"
  replication.factor = 3
  bootstrap.servers = "localhost:9092"
  schema.registry.url = "mock://localhost:8081"
  rocksdb.config.setter = org.hypertrace.core.kafkastreams.framework.rocksdb.RocksDBStateStoreConfigSetter
  rocksdb.block.cache.size = 33554432
  rocksdb.write.buffer.size = 8388608
  rocksdb.max.write.buffers = 2
  rocksdb.cache.index.and.filter.blocks = true
  value.subject.name.strategy = "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy"
}

group.partitioner = {
  enabled = false
  service.host = localhost
  service.port = 50104
}

span.window.store.retention.time.mins = 60
span.window.store.retention.time.mins = ${?SPAN_WINDOW_STORE_RETENTION_TIME_MINS}
span.window.store.segment.size.mins = 20
span.window.store.segment.size.mins = ${?SPAN_WINDOW_STORE_SEGMENT_SIZE_MINS}

default.max.span.count = 6
max.span.count = {
  tenant1 = 5
}

span.groupby.session.window.interval = 30

span.groupby.session.window.graceperiod.ms = 100

dataflow.metriccollection.sampling.percent = 10.0

trace.emit.callback.registry {
  frequency = 15s
  yield = 5s
  window = 5ms
}