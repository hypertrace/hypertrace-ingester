service.name = view-creator
service.admin.port = 8099

main.class = org.hypertrace.core.viewcreator.ViewCreatorLauncher
tool.class = org.hypertrace.core.viewcreator.pinot.PinotTableCreationTool

view.name = logEventView
view.output.schema.class = org.hypertrace.viewgenerator.api.LogEventView
view.output.schema.url = "host:port/myView"

kafka.brokerAddress = "bootstrap:9092"
kafka.topicName = log-event-view
kafka.partitions = 1
kafka.replicationFactor = 1
pinot.controllerHost = pinot-controller
pinot.controllerPort = 9000
pinot.timeColumn = timestamp_nanos
pinot.timeUnit = NANOSECONDS
pinot.dimensionColumns = [tenant_id, span_id, trace_id, timestamp_nanos, attributes, summary]
pinot.columnsMaxLength={attributes: 5120}
pinot.metricColumns = []
pinot.invertedIndexColumns= []
pinot.rangeIndexColumns = [timestamp_nanos]
pinot.bloomFilterColumns = []
pinot.noDictionaryColumns = [attributes]
pinot.tableName = logEventView
pinot.loadMode = MMAP
pinot.numReplicas = 1
pinot.retentionTimeValue = 5
pinot.retentionTimeUnit = DAYS
pinot.brokerTenant = DefaultTenant
pinot.brokerTenant = ${?PINOT_BROKER_TAG}
pinot.serverTenant = DefaultTenant
pinot.serverTenant = ${?PINOT_SERVER_TAG}
pinot.segmentAssignmentStrategy = BalanceNumSegmentAssignmentStrategy

pinot.streamConfigs =
{
    streamType: kafka,
    stream.kafka.consumer.type: LowLevel,
    stream.kafka.topic.name: log-event-view,
    stream.kafka.consumer.factory.class.name: "org.apache.pinot.plugin.stream.kafka20.KafkaConsumerFactory",
    stream.kafka.decoder.class.name: "org.apache.pinot.plugin.inputformat.avro.confluent.KafkaConfluentSchemaRegistryAvroMessageDecoder",
    stream.kafka.decoder.prop.schema.registry.rest.url: "http://schema-registry-service:8081",
    stream.kafka.decoder.prop.schema.registry.rest.url: ${?SCHEMA_REGISTRY_URL},
    stream.kafka.hlc.zk.connect.string: "zookeeper:2181",
    stream.kafka.hlc.zk.connect.string: ${?ZK_CONNECT_STR},
    stream.kafka.zk.broker.url: "zookeeper:2181",
    stream.kafka.zk.broker.url: ${?ZK_CONNECT_STR},
    stream.kafka.broker.list: "bootstrap:9092",
    stream.kafka.broker.list: ${?KAFKA_BOOTSTRAP_SERVERS},
    realtime.segment.flush.threshold.time: 3600000,
    realtime.segment.flush.threshold.size: 500000,
    stream.kafka.consumer.prop.auto.offset.reset: largest
}