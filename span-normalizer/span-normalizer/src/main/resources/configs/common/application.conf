service.name = span-normalizer
service.admin.port = 8099

main.class = org.hypertrace.core.spannormalizer.SpanNormalizer

span.type = jaeger
input.topic = "jaeger-spans"
output.topic = "raw-spans-from-jaeger-spans"
bypass.output.topic = "structured-traces-from-raw-spans"
raw.logs.output.topic = "raw-logs"
precreate.topics = false
precreate.topics = ${?PRE_CREATE_TOPICS}

kafka.streams.config = {
  application.id = jaeger-spans-to-raw-spans-job
  num.stream.threads = 2
  num.stream.threads = ${?NUM_STREAM_THREADS}

  bootstrap.servers = "localhost:9092"
  bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}

  schema.registry.url = "http://localhost:8081"
  schema.registry.url = ${?SCHEMA_REGISTRY_URL}
  value.subject.name.strategy = "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy"
}

processor {
  defaultTenantId = ${?DEFAULT_TENANT_ID}
  late.arrival.threshold.duration = 365d
}

logger.names = ["file"]
logger.file.dir = "/var/logs/span-normalizer"

metrics.reporter.prefix = org.hypertrace.core.spannormalizer.jobSpanNormalizer
metrics.reporter.names = ["prometheus"]
metrics.reportInterval = 60

clients = {
  config.service.config = {
    host = localhost
    port = 50101
  }
}

span.rules.exclude {
  cache = {
    refreshAfterWriteDuration = 3m
    expireAfterWriteDuration = 5m
  }
}
