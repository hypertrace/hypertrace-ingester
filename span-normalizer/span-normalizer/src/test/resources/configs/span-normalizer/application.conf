service.name = span-normalizer
service.admin.port = 8099

main.class = org.hypertrace.core.spannormalizer.SpanNormalizer

span.type = jaeger
input.topic = "jaeger-spans"
output.topic = "raw-spans-from-jaeger-spans"
bypass.output.topic = "structured-traces-from-raw-spans"
raw.logs.output.topic = "raw-logs"

kafka.streams.config = {
  application.id = jaeger-spans-to-raw-spans-job
  metrics.recording.level = INFO
  num.stream.threads = 2
  producer.compression.type = gzip
  topology.optimization = all

  bootstrap.servers = "localhost:9092"
  auto.offset.reset = "latest"
  auto.commit.interval.ms = 5000
  schema.registry.url = "mock://localhost:8081"
  default.key.serde="org.hypertrace.core.kafkastreams.framework.serdes.AvroSerde"
  default.value.serde="org.hypertrace.core.kafkastreams.framework.serdes.AvroSerde"
}

processor {
  defaultTenantId = "__default"
}

processor {
  spanDropFilters = [
    [
      {
        "tagKey": "http.method",
        "operator": "EQ",
        "tagValue": "GET"
      },
      {
        "tagKey": "http.url",
        "operator": "CONTAINS",
        "tagValue": "health"
      }
    ],
    [
      {
        "tagKey": "grpc.url",
        "operator": "NEQ",
        "tagValue": "Sent.TestServiceGetEchos"
      }
    ]
  ]
}

processor {
  bypass.key = "test.bypass"
  late.arrival.threshold.duration = "1d"

  # Configuration for dropping certain attributes that are captured by agent, but doesn't require in
  # the processing pipeline.
  #
  # allowed.attributes.prefixes : the list of prefixes that should match for which allowed keys
  # prefixed.matched.allowed.attributes : allowed keys from the subset of keys where prefix matched
  #
  # If either of config is empty allowed.attributes.prefixes or prefixed.matched.allowed.attributes,
  # it will not drop any attributes.
  # The above configuration doesn't impact if the key doesn't start with prefix.
  allowed.attributes.prefixes = ["http.request.header.x-", "http.response.header.x-"]
  prefixed.matched.allowed.attributes = ["http.request.header.x-allowed-1", "http.response.header.x-allowed-2"]
}

clients = {
  config.service.config = {
    host = localhost
    port = 50101
  }
}

span.rules.exclude {
  cache = {
    refreshAfterWriteDuration = 3m
    expireAfterWriteDuration = 5m
  }
}

